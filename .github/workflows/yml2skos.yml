name: Publish Vocabulary Workflow from yml

on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
      version:
        required: false
        type: string
      namespace:
        required: true
        type: string
      voc_uri:
        required: true
        type: string
      entity_name:
        required: true
        type: string
      linkml_schema:
        required: true
        type: string
      data:
        required: false
        type: string
      artefact_name:
        required: false
        type: string
      
    secrets:
        token:
          required: true
          
jobs:
  yml-to-skos:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.6.0
        with:
          access_token: ${{ github.token }}
      
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          token: ${{ secrets.token }}

      - name: Set data file path
        id: data-path
        run: |
          if [ -n "${{ inputs.artefact_name }}" ]; then
            echo "Downloading artifact: ${{ inputs.artefact_name }}"
            echo "data_file=./downloaded-artifacts/${{ inputs.artefact_name }}" >> $GITHUB_OUTPUT
          else
            echo "Using file from repo: ${{ inputs.data }}"
            echo "data_file=${{ inputs.data }}" >> $GITHUB_OUTPUT
          fi

      - name: Download artifact if needed
        if: inputs.artefact_name != ''
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artefact_name }}
          path: ./downloaded-artifacts

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install pip dependencies
        run: pip install skosify linkml

      - name: Process schema (download or copy)
        run: |
          if [[ "${{ inputs.linkml_schema }}" == http* ]]; then
            # If it's a URL, download the schema
            echo "Schema is a URL. Downloading..."
            curl -L "${{ inputs.linkml_schema }}" -o ./schema.linkml.yml
          else
            # If it's a file path, copy the schema
            echo "Schema is a file path. Copying..."
            cp "${{ inputs.linkml_schema }}" ./schema.linkml.yml
          fi

      - name: Set up skosify.py
        id: skosify-script
        run: |
          if [[ "${{ github.repository }}" == "eu-parc/voc2skosmos-workflow" ]]; then
            cp rules/skosify.py skosify.py
            echo "Used local skosify.py"
          else
            curl -o skosify.py https://raw.githubusercontent.com/eu-parc/voc2skosmos-workflow/main/rules/skosify.py
            echo "Downloaded skosify.py"
          fi
      
      - name: Add skos:Concept as class_uri to schema
        run: |
          python3 skosify.py \
          -s ./schema.linkml.yml \
          -e "${{ inputs.entity_name }}" \
          -o schema.skos.linkml.yml
      
      - name: Convert yml to rdf
        run: |
          linkml-convert --schema ./schema.skos.linkml.yml -t ttl -P "_base=${{ inputs.namespace}}" "${{ steps.data-path.outputs.data_file }}" > linked_data.rdf.ttl
        
      - name: Set up language.py
        id: language-script
        run: |
          if [[ "${{ github.repository }}" == "eu-parc/voc2skosmos-workflow" ]]; then
            cp rules/language.py language.py
            echo "Used local language.py"
          else
            curl -o language.py https://raw.githubusercontent.com/eu-parc/voc2skosmos-workflow/main/rules/language.py
            echo "Downloaded language.py"
          fi
        
      - name: Add language annotations
        run: |
           python3 language.py \
            -s ./schema.skos.linkml.yml \
            -d ${{ steps.data-path.outputs.data_file }} \
            -t linked_data.rdf.ttl \
            -o language_annotated.rdf.ttl
      
      - name: Run skosify
        run: |
          skosify language_annotated.rdf.ttl -o voc.skos.ttl \
            --namespace "${{ inputs.voc_uri}}" \
            --set-modified \
            --cleanup-unreachable \
            -l en

      - name: Ensure voc.skos.ttl is meaningful
        run: |
          if [ ! -f voc.skos.ttl ]; then
            echo "Error: voc.skos.ttl does not exist."
            exit 1
          fi
          if ! grep -q -E '^\s*[^@#]+\s+[^@#]+\s+[^@#]+\s*\.' voc.skos.ttl; then
            echo "Error: voc.skos.ttl appears to contain no RDF triples."
            exit 1
          fi
      
      - name: Upload vocabulary
        uses: actions/upload-artifact@v4
        with:
          name: voc-from-yml.skos.ttl
          path: ./voc.skos.ttl

      - name: Publish  
        if: github.event_name == 'release'
        uses: ./.github/workflows/skosmos_upload.yml
        with:
          artifact: voc-from-yml.skos.ttl
          token: ${{ secrets.GITHUB_TOKEN }}
